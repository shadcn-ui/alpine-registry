{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "booking-form",
  "type": "registry:block",
  "title": "Booking Form",
  "description": "A booking form with location, check-in, and check-out fields.",
  "dependencies": [
    "date-fns",
    "radix-ui",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "lucide-react",
    "react-day-picker"
  ],
  "files": [
    {
      "path": "registry/alpine/forms/booking-form.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Button } from \"@/registry/alpine/ui/button\"\r\nimport { Input } from \"@/registry/alpine/ui/input\"\r\nimport { Label } from \"@/registry/alpine/ui/label\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/registry/alpine/ui/popover\"\r\nimport { Calendar } from \"@/registry/alpine/ui/calendar\"\r\nimport { CalendarIcon } from \"lucide-react\"\r\nimport { format } from \"date-fns\"\r\nimport type { DateRange } from \"react-day-picker\"\r\n\r\nexport function ListingBookingForm({\r\n  heading,\r\n  subheading,\r\n  className,\r\n  ...props\r\n}: {\r\n  heading: string\r\n  subheading: string\r\n  className?: string\r\n} & React.ComponentProps<\"form\">) {\r\n  const [open, setOpen] = React.useState(false)\r\n  const [date, setDate] = React.useState<DateRange>()\r\n\r\n  const dateDisplay = React.useMemo(() => {\r\n    if (!date?.from) {\r\n      return \"Select date\"\r\n    }\r\n\r\n    if (date.from === date.to) {\r\n      return format(date.from, \"MMM d, yyyy\")\r\n    }\r\n\r\n    if (!date.to) {\r\n      return format(date.from, \"MMM d, yyyy\")\r\n    }\r\n\r\n    return `${format(date.from, \"MMM d, yyyy\")} - ${format(date.to, \"MMM d, yyyy\")}`\r\n  }, [date])\r\n\r\n  return (\r\n    <form\r\n      className={cn(\r\n        \"bg-background ring-border flex max-w-sm flex-col gap-4 rounded-lg p-6 shadow-lg ring md:shadow-2xl\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <div className=\"flex flex-col gap-1\">\r\n        <h2 className=\"text-3xl font-bold tracking-tighter\">{heading}</h2>\r\n        <p className=\"text-muted-foreground text-sm\">{subheading}</p>\r\n      </div>\r\n      <div className=\"flex flex-col gap-3\">\r\n        <Label htmlFor=\"location\">Location</Label>\r\n        <Input id=\"location\" type=\"text\" placeholder=\"United States\" />\r\n      </div>\r\n      <div className=\"flex flex-col gap-3\">\r\n        <Label htmlFor=\"date\">Date</Label>\r\n        <Popover open={open} onOpenChange={setOpen}>\r\n          <PopoverTrigger asChild>\r\n            <Button\r\n              id=\"date\"\r\n              variant=\"outline\"\r\n              className=\"w-full justify-start text-left font-normal\"\r\n            >\r\n              <CalendarIcon />\r\n              {dateDisplay}\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\r\n            <Calendar\r\n              mode=\"range\"\r\n              selected={date}\r\n              onSelect={setDate}\r\n              captionLayout=\"dropdown\"\r\n            />\r\n          </PopoverContent>\r\n        </Popover>\r\n      </div>\r\n      <div className=\"flex flex-col gap-3\">\r\n        <Label htmlFor=\"guests\">Guests</Label>\r\n        <Input id=\"guests\" type=\"number\" placeholder=\"2\" />\r\n      </div>\r\n      <div>\r\n        <Button className=\"w-full\">Search</Button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry\\alpine\\forms\\booking-form.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Button } from \"@/registry/alpine/ui/button\"\r\nimport { Input } from \"@/registry/alpine/ui/input\"\r\nimport { Label } from \"@/registry/alpine/ui/label\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/registry/alpine/ui/popover\"\r\nimport { Calendar } from \"@/registry/alpine/ui/calendar\"\r\nimport { CalendarIcon } from \"lucide-react\"\r\nimport { format } from \"date-fns\"\r\nimport type { DateRange } from \"react-day-picker\"\r\n\r\nexport function ListingBookingForm({\r\n  heading,\r\n  subheading,\r\n  className,\r\n  ...props\r\n}: {\r\n  heading: string\r\n  subheading: string\r\n  className?: string\r\n} & React.ComponentProps<\"form\">) {\r\n  const [open, setOpen] = React.useState(false)\r\n  const [date, setDate] = React.useState<DateRange>()\r\n\r\n  const dateDisplay = React.useMemo(() => {\r\n    if (!date?.from) {\r\n      return \"Select date\"\r\n    }\r\n\r\n    if (date.from === date.to) {\r\n      return format(date.from, \"MMM d, yyyy\")\r\n    }\r\n\r\n    if (!date.to) {\r\n      return format(date.from, \"MMM d, yyyy\")\r\n    }\r\n\r\n    return `${format(date.from, \"MMM d, yyyy\")} - ${format(date.to, \"MMM d, yyyy\")}`\r\n  }, [date])\r\n\r\n  return (\r\n    <form\r\n      className={cn(\r\n        \"bg-background ring-border flex max-w-sm flex-col gap-4 rounded-lg p-6 shadow-lg ring md:shadow-2xl\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <div className=\"flex flex-col gap-1\">\r\n        <h2 className=\"text-3xl font-bold tracking-tighter\">{heading}</h2>\r\n        <p className=\"text-muted-foreground text-sm\">{subheading}</p>\r\n      </div>\r\n      <div className=\"flex flex-col gap-3\">\r\n        <Label htmlFor=\"location\">Location</Label>\r\n        <Input id=\"location\" type=\"text\" placeholder=\"United States\" />\r\n      </div>\r\n      <div className=\"flex flex-col gap-3\">\r\n        <Label htmlFor=\"date\">Date</Label>\r\n        <Popover open={open} onOpenChange={setOpen}>\r\n          <PopoverTrigger asChild>\r\n            <Button\r\n              id=\"date\"\r\n              variant=\"outline\"\r\n              className=\"w-full justify-start text-left font-normal\"\r\n            >\r\n              <CalendarIcon />\r\n              {dateDisplay}\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent className=\"w-auto overflow-hidden p-0\" align=\"start\">\r\n            <Calendar\r\n              mode=\"range\"\r\n              selected={date}\r\n              onSelect={setDate}\r\n              captionLayout=\"dropdown\"\r\n            />\r\n          </PopoverContent>\r\n        </Popover>\r\n      </div>\r\n      <div className=\"flex flex-col gap-3\">\r\n        <Label htmlFor=\"guests\">Guests</Label>\r\n        <Input id=\"guests\" type=\"number\" placeholder=\"2\" />\r\n      </div>\r\n      <div>\r\n        <Button className=\"w-full\">Search</Button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "registry\\alpine\\ui\\button.tsx",
      "content": "import * as React from \"react\"\r\nimport { Slot as SlotPrimitive } from \"radix-ui\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\r\n        outline:\r\n          \"border bg-background hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input text-foreground dark:hover:bg-input/50\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost:\r\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\r\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\r\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\r\n        icon: \"size-9\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nfunction Button({\r\n  className,\r\n  variant,\r\n  size,\r\n  asChild = false,\r\n  ...props\r\n}: React.ComponentProps<\"button\"> &\r\n  VariantProps<typeof buttonVariants> & {\r\n    asChild?: boolean\r\n  }) {\r\n  const Comp = asChild ? SlotPrimitive.Slot : \"button\"\r\n\r\n  return (\r\n    <Comp\r\n      data-slot=\"button\"\r\n      className={cn(buttonVariants({ variant, size, className }))}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Button, buttonVariants }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry\\alpine\\ui\\input.tsx",
      "content": "import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Input({ className, type, ...props }: React.ComponentProps<\"input\">) {\r\n  return (\r\n    <input\r\n      type={type}\r\n      data-slot=\"input\"\r\n      className={cn(\r\n        \"file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\r\n        \"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]\",\r\n        \"aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Input }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry\\alpine\\ui\\label.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Label as LabelPrimitive } from \"radix-ui\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Label({\r\n  className,\r\n  ...props\r\n}: React.ComponentProps<typeof LabelPrimitive.Root>) {\r\n  return (\r\n    <LabelPrimitive.Root\r\n      data-slot=\"label\"\r\n      className={cn(\r\n        \"flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Label }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry\\alpine\\ui\\popover.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Popover as PopoverPrimitive } from \"radix-ui\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nfunction Popover({\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Root>) {\r\n  return <PopoverPrimitive.Root data-slot=\"popover\" {...props} />\r\n}\r\n\r\nfunction PopoverTrigger({\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {\r\n  return <PopoverPrimitive.Trigger data-slot=\"popover-trigger\" {...props} />\r\n}\r\n\r\nfunction PopoverContent({\r\n  className,\r\n  align = \"center\",\r\n  sideOffset = 4,\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Content>) {\r\n  return (\r\n    <PopoverPrimitive.Portal>\r\n      <PopoverPrimitive.Content\r\n        data-slot=\"popover-content\"\r\n        align={align}\r\n        sideOffset={sideOffset}\r\n        className={cn(\r\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 shadow-md outline-hidden\",\r\n          className\r\n        )}\r\n        {...props}\r\n      />\r\n    </PopoverPrimitive.Portal>\r\n  )\r\n}\r\n\r\nfunction PopoverAnchor({\r\n  ...props\r\n}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {\r\n  return <PopoverPrimitive.Anchor data-slot=\"popover-anchor\" {...props} />\r\n}\r\n\r\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "registry\\alpine\\ui\\calendar.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport {\r\n  ChevronDownIcon,\r\n  ChevronLeftIcon,\r\n  ChevronRightIcon,\r\n} from \"lucide-react\"\r\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button, buttonVariants } from \"@/registry/alpine/ui/button\"\r\n\r\nfunction Calendar({\r\n  className,\r\n  classNames,\r\n  showOutsideDays = true,\r\n  captionLayout = \"label\",\r\n  formatters,\r\n  components,\r\n  ...props\r\n}: React.ComponentProps<typeof DayPicker>) {\r\n  const defaultClassNames = getDefaultClassNames()\r\n\r\n  return (\r\n    <DayPicker\r\n      showOutsideDays={showOutsideDays}\r\n      className={cn(\"bg-card p-3 [--cell-size:--spacing(8)]\", className)}\r\n      captionLayout={captionLayout}\r\n      formatters={{\r\n        formatMonthDropdown: (date) => {\r\n          return date.toLocaleString(\"default\", { month: \"short\" })\r\n        },\r\n        ...formatters,\r\n      }}\r\n      classNames={{\r\n        root: cn(\"w-fit\", defaultClassNames.root),\r\n        months: cn(\r\n          \"flex gap-4 flex-col md:flex-row relative\",\r\n          defaultClassNames.months\r\n        ),\r\n        month: cn(\"flex flex-col w-full gap-4\", defaultClassNames.month),\r\n        nav: cn(\r\n          \"flex items-center gap-1 w-full absolute top-0 inset-x-0 justify-between\",\r\n          defaultClassNames.nav\r\n        ),\r\n        button_previous: cn(\r\n          buttonVariants({ variant: \"ghost\" }),\r\n          \"size-(--cell-size) bg-transparent p-0 shadow-none\",\r\n          defaultClassNames.button_previous\r\n        ),\r\n        button_next: cn(\r\n          buttonVariants({ variant: \"ghost\" }),\r\n          \"size-(--cell-size) bg-transparent p-0 shadow-none\",\r\n          defaultClassNames.button_next\r\n        ),\r\n        month_caption: cn(\r\n          \"flex items-center justify-center h-(--cell-size) w-full px-(--cell-size)\",\r\n          defaultClassNames.month_caption\r\n        ),\r\n        dropdowns: cn(\r\n          \"w-full flex items-center text-sm font-medium justify-center h-(--cell-size) gap-1.5\",\r\n          defaultClassNames.dropdowns\r\n        ),\r\n        dropdown_root: cn(\r\n          \"relative has-focus:border-ring border border-input shadow-xs has-focus:ring-ring/50 has-focus:ring-[3px] rounded-md\",\r\n          defaultClassNames.dropdown_root\r\n        ),\r\n        dropdown: cn(\"absolute inset-0 opacity-0\", defaultClassNames.dropdown),\r\n        caption_label: cn(\r\n          captionLayout === \"label\"\r\n            ? \"text-sm font-medium\"\r\n            : \"rounded-md pl-2 pr-1 flex items-center gap-1 text-sm font-medium h-8 [&>svg]:text-muted-foreground [&>svg]:size-3.5\",\r\n          defaultClassNames.caption_label\r\n        ),\r\n        table: \"w-full border-collapse\",\r\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\r\n        weekday: cn(\r\n          \"text-muted-foreground rounded-md flex-1 font-normal text-[0.8rem]\",\r\n          defaultClassNames.weekday\r\n        ),\r\n        week: cn(\"flex w-full mt-2\", defaultClassNames.week),\r\n        day: cn(\r\n          \"relative w-full h-full p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md group/day aspect-square\",\r\n          defaultClassNames.day\r\n        ),\r\n        range_start: cn(\r\n          \"rounded-l-md bg-accent\",\r\n          defaultClassNames.range_start\r\n        ),\r\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\r\n        range_end: cn(\"rounded-r-md bg-accent\", defaultClassNames.range_end),\r\n        today: cn(\r\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\r\n          defaultClassNames.today\r\n        ),\r\n        outside: cn(\r\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\r\n          defaultClassNames.outside\r\n        ),\r\n        disabled: cn(\r\n          \"text-muted-foreground opacity-50\",\r\n          defaultClassNames.disabled\r\n        ),\r\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\r\n        ...classNames,\r\n      }}\r\n      components={{\r\n        Root: ({ className, rootRef, ...props }) => {\r\n          return (\r\n            <div\r\n              data-slot=\"calendar\"\r\n              className={cn(className)}\r\n              ref={rootRef}\r\n              {...props}\r\n            />\r\n          )\r\n        },\r\n        Chevron: ({ className, orientation, ...props }) => {\r\n          if (orientation === \"left\") {\r\n            return (\r\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\r\n            )\r\n          }\r\n\r\n          if (orientation === \"right\") {\r\n            return (\r\n              <ChevronRightIcon\r\n                className={cn(\"size-4\", className)}\r\n                {...props}\r\n              />\r\n            )\r\n          }\r\n\r\n          return (\r\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\r\n          )\r\n        },\r\n        DayButton: CalendarDayButton,\r\n        ...components,\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nfunction CalendarDayButton({\r\n  className,\r\n  day,\r\n  modifiers,\r\n  ...props\r\n}: React.ComponentProps<typeof DayButton>) {\r\n  const defaultClassNames = getDefaultClassNames()\r\n\r\n  const ref = React.useRef<HTMLButtonElement>(null)\r\n  React.useEffect(() => {\r\n    if (modifiers.focused) ref.current?.focus()\r\n  }, [modifiers.focused])\r\n\r\n  return (\r\n    <Button\r\n      ref={ref}\r\n      variant=\"ghost\"\r\n      size=\"icon\"\r\n      data-day={day.date.toLocaleDateString()}\r\n      data-selected-single={\r\n        modifiers.selected &&\r\n        !modifiers.range_start &&\r\n        !modifiers.range_end &&\r\n        !modifiers.range_middle\r\n      }\r\n      data-range-start={modifiers.range_start}\r\n      data-range-end={modifiers.range_end}\r\n      data-range-middle={modifiers.range_middle}\r\n      className={cn(\r\n        \"data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 flex aspect-square size-auto w-full min-w-(--cell-size) flex-col gap-1 leading-none font-normal group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] data-[range-end=true]:rounded-md data-[range-end=true]:rounded-r-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md data-[range-start=true]:rounded-l-md [&>span]:text-xs [&>span]:opacity-70\",\r\n        defaultClassNames.day,\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Calendar, CalendarDayButton }\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n\r\nexport function getRegistryItemUrl(name: string) {\r\n  return `${process.env.NEXT_PUBLIC_BASE_URL}/r/${name}.json`\r\n}\r\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}
